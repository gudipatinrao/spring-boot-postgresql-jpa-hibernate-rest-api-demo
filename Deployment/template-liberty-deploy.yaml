---
kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: pg-springboot-deploy-template
labels:
  template: pg-springboot-deploy-template
objects:
  -
    apiVersion: v1
    kind: Service
    metadata:
      name: "${APPLICATION_NAME}"
      annotations:
        description: "The web server's http port."
      labels:
        application: "${APPLICATION_NAME}"

    spec:
      ports:
        -
          name: 9080-tcp
          port: 9080
          protoco: TCP
          targetPort: 9080
        -
          name: 9443-tcp
          port: 9443
          protoco: TCP
          targetPort: 9443
        -
          name: http
          port: 9082
          protoco: TCP
          targetPort: 9082
      selector:
        deploymentConfig: "${APPLICATION_NAME}"
  -
    apiVersion: v1
    id: "${APPLICATION_NAME}-http"
    kind: Route
    metadata:
      name: "${APPLICATION_NAME}"
      annotations:
        description: "Route for application's http service."
      labels:
        application: "${APPLICATION_NAME}"

    spec:
      port:
        targetPort: 9443-tcp
      tls:
        termination: passthrough
      to:
        name: "${APPLICATION_NAME}"
  -
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        application: "${APPLICATION_NAME}"
    spec:
      replicas: 1
      selector:
        deploymentConfig: "${APPLICATION_NAME}"
      strategy:
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          name: "${APPLICATION_NAME}"
          labels:
            application: "${APPLICATION_NAME}"
            deploymentConfig: "${APPLICATION_NAME}"
        spec:
          containers:
              - name: "${APPLICATION_NAME}"
                image: "${APPLICATION_NAME}"
                allowPrivilegeEscalation: false
                dnsPolicy: ClusterFirst
                imagePullPolicy: Always
                livenessProbe:
                  tcpSocket:
                    failureThreshold: 3
                    initialDelaySeconds: 45
                    periodSeconds: 45
                    port: 9443
                    successThreshold: 1
                    timeoutSeconds: 1
                ports:
                  -
                    containerPort: 9080
                    name: 9080-tcp
                    protocol: TCP
                  -
                    containerPort: 9443
                    name: 9443-tcp
                    protocol: TCP
                  -
                    containerPort: 9082
                    name: http
                    protocol: TCP
                privileged: false
                readOnlyRootFilesystem: false
                readinessProbe:
                  tcpSocket:
                    failureThreshold: 3
                    initialDelaySeconds: 180
                    periodSeconds: 5
                    port: 9443
                    successThreshold: 1
                    timeoutSeconds: 1
                securityContext:
                  capabilities:
                    drop:
                      - ALL
                  privileged: false
                  readOnlyRootFilesystem: false
                  allowPrivilegeEscalation: false
                volumeMounts:
                  - name: keystore-cert
                    mountPath: /etc/keystore/cert/
                    readOnly: true
          serviceAccount: websphere
          serviceAccountName: websphere
          terminationGracePeriodSeconds: 60
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          volumes:
            - name: keystore-cert
              secret:
                secretName: "${NAME}-dev-cert-secret"

      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - "${APPLICATION_NAME}"
            from:
              kind: ImageStream
              name: "${APPLICATION_NAME}"
          type: ImageChange
        - type: ConfigChange
parameters:
  -
    description: "The name for the application."
    name: APPLICATION_NAME
    required: true
    value: tasks

